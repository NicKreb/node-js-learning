Middleware are functions and bits of code that runs between the request and response

such as: app.use(func) and app.get('/', func).

The order of middleware is incredibly important for how it runs. 

Middleware Examples:
* Logger Middleware to log details of every request
* Authentication check middleware for protected routes
* Middleware to parse JSON data from requests
* Return 404 pages

Static files are like jpeg image files, etc..

By creating an use() function that includes express.statc() as the arg I can 
now put in a string with a file/folder name within the static function and it will
allow link elements within the folder to affect the html. Otherwise, beforehand
I would have had to bake the styles code, for example, in to the html directly
with a styles element. In a way, this also lets me separate what public can access
and what they can't.

------ DataBases -------

SQL:
use tables, rows, and columns to store data

NoSQL:
uses Collections and Documents to store data
    - a collection would be a series of User Documents, or in the case of the blog site
    a series of Blog document.

    -a document in this case represents a single item(a single blog) of data in the data base:
    example of a document:
    {
        "_id": ObjectId(12345),
        "title": "Opening Party",
        "snippet": "All about the...",
        "body": "blah blah blah...."
    }

    now we created our MongoDB profile (screenshot has log in details), and
    created this user:

    KrebBlogger69 : Osias_ess7

    This can be found in the user list on the bottom left of the menu.

    next we connected our cluster, and chose the local method (top of the list)
    where we copied this:
    'mongodb+srv://<username>:<password>@nickrebcluster.a1xqyxk.mongodb.net/?retryWrites=true&w=majority'

    in that string the <username> and <password> elements should be replaced with the username and password
    within KrebBlogger69's info. NOTE: YOU MUST DELETE THE ENTIRE '<username>' and '<password>' BRACKETS AND ALL TO WORK.
    also: ...a1xqyxk.mongodb.net/Crabstilts?retryWrites=true&w=majority 
    AFTER THE .NET/ you need to put the name of the DB you are wanting to access! in order for your code to make changes!

    now that we've created our Database with MongoDB, and a user. We are now
    going to connect everything using Mongoose.

    Mongoose is an ODM library - Object Document Mapping library

    it wraps the standard MonoDBI and connects it to the database using simple data models,
    which uses query models to get information. It pulls the information we need from the database
    for us using methods detected for the model we need.

    examples: User model > User.get(), User.findByld() | Blog.deleteOne()

    Schemas and Models:

    Schemas define the structure of a type of data / document
        -Properties and property types

        User Schema:
        - name (string), required
        - age (number)
        - bio (string), required
    
        Blog Schema:
        - title (string), required
        - snippet (string), required
        - body (string), required

modles allow us to communicate with database collections:

blog model: blog schema -> get, save, delete, etc -> DB blog collection.

----- Request Types -----
GET requests to get a resource //example: localhose:3000/blogs or localhose:3000/blogs/create
POST requests to creat new data //example: localhost:3000/blogs is also a post request
DELETE requests to delete data 
PUT requests to update data 

// localhost:3000/blogs/:id is a useable route for DELETE, GET, and POST requests too!

---- route parameters ----

Route parameters are part of the route that are variables that can change.
such as in localhose:3000/blogs/:id , the :id is a variable that changes with each post.